{"version":3,"sources":["App/components/AppHeader/index.js","App/components/Square/index.js","App/components/Board/index.js","App/components/ScoreBoard/index.js","App/components/Game/index.js","App/index.js","index.js"],"names":["AppHeader","Navbar","fluid","Brand","to","Square","onClick","value","isWinning","className","Board","squares","winningSquares","renderSquare","i","includes","index","props","console","log","score","X","O","Game","useState","Array","fill","gameHistory","setGameHistory","stepNumber","setStepNumber","xIsNext","setXisNext","setScore","winner","setWinner","handlePlayAgain","calculateWinner","lines","length","a","b","c","current","useEffect","status","moves","map","step","move","desc","key","jumpTo","history","slice","handleClick","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c2394f4f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\n\r\nconst AppHeader = () => (\r\n    <Navbar fluid>\r\n        <Navbar.Brand>\r\n            <Link to=\"/\">Tic-Tac-Toe (Standalone)</Link>\r\n        </Navbar.Brand>\r\n    </Navbar>\r\n);\r\n\r\nexport default AppHeader;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * A square in the game of tic tac toe.   Can be clicked or the square can contain a value.\r\n */\r\nconst Square = ({onClick, value,isWinning}) => (\r\n    //when is winning is true the classname will change and winning move will be higlighted\r\n    <button \r\n    className={\"square \" + (isWinning ? \"square--winning\" : null)} \r\n    onClick={onClick}>\r\n    {value}\r\n    </button>\r\n);\r\n\r\nSquare.propTypes = {\r\n    /**\r\n     *  The handler for when a square is clicked\r\n     */\r\n    onClick: PropTypes.func,\r\n\r\n    /**\r\n     *  The value to put in the square\r\n     */\r\n    value: PropTypes.string\r\n};\r\n\r\nexport default Square;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Square from '../Square';\r\n\r\n/**\r\n * A board for the game of tic-tac-toe.  A 3x3 square.\r\n */\r\nconst Board = ({onClick, squares,winningSquares}) => {\r\n    const renderSquare = (i) => {\r\n      return <Square\r\n          isWinning={winningSquares.includes(i)}//false,false,true\r\n            value={squares[i]}\r\n            onClick={() => onClick(i)}\r\n        />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"board-row\">\r\n              {renderSquare(0)}\r\n              {renderSquare(1)}\r\n              {renderSquare(2)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n              {renderSquare(3)}\r\n              {renderSquare(4)}\r\n              {renderSquare(5)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n              {renderSquare(6)}\r\n              {renderSquare(7)}\r\n              {renderSquare(8)}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nBoard.propTypes = {\r\n    /**\r\n     *  The 1..9 array of squares to display\r\n     */\r\n    squares: PropTypes.array.isRequired,\r\n\r\n    /**\r\n     *  The handler for when a square is clicked\r\n     */\r\n    onClick: PropTypes.func\r\n};\r\n\r\nexport default Board;","import React from 'react'\r\n\r\nexport default function index(props) {\r\n    console.log(props)\r\n    //when players win the score will be updated each and every time.\r\n    return (\r\n        <div className=\"scoreboard\">\r\n            <p>Player 1: <span>{props.score.X}</span></p>\r\n            <p>Player 2: <span>{props.score.O}</span></p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Board from \"../Board\";\r\nimport ScoreBoard from \"../ScoreBoard\";\r\n\r\n/**\r\n * A game of tic-tac-toe.\r\n */\r\nconst Game = () => {\r\n  const [gameHistory, setGameHistory] = useState([\r\n    { squares: Array(9).fill(null) },\r\n  ]); // Start of game\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [xIsNext, setXisNext] = useState(true);\r\n  const [score, setScore] = useState({ X: 0, O: 0 });\r\n  const [winner, setWinner] = useState(null);\r\n\r\n  //this function will default the states for new game\r\n  const handlePlayAgain = () => {\r\n    setGameHistory([{ squares: Array(9).fill(null) }]);\r\n    setStepNumber(0);\r\n    setWinner(null);\r\n  };\r\n\r\n  const calculateWinner = (squares) => {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n\r\n      if (\r\n        squares[a] &&\r\n        squares[a] === squares[b] &&\r\n        squares[a] === squares[c]\r\n      ) {\r\n        return {\r\n          squares: squares[a],\r\n          lines: lines[i],\r\n        };\r\n      }\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const handleClick = (i) => {\r\n    const history = gameHistory.slice(0, stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    squares[i] = xIsNext ? \"X\" : \"O\";\r\n\r\n    setGameHistory([...history, { squares }]);\r\n    setStepNumber(history.length);\r\n    setXisNext(!xIsNext);\r\n  };\r\n\r\n  const jumpTo = (step) => {\r\n    setStepNumber(step);\r\n    setXisNext(step % 2 === 0);\r\n  };\r\n  const current = gameHistory[stepNumber];\r\n\r\n  // this useeffect when winner is false will calculate winner\r\n  useEffect(() => {\r\n    if (!winner) {\r\n      setWinner(calculateWinner(current.squares));\r\n    }\r\n  }, [winner, current.squares]);\r\n\r\n    // this useeffect hook will update the score when the winner is true\r\n  useEffect(() => {\r\n    if (winner) {\r\n      setScore({\r\n        ...score,\r\n        [winner.squares]: score[winner.squares] + 1,\r\n      });\r\n    }\r\n  }, [winner]);\r\n\r\n  const moves = gameHistory.map((step, move) => {\r\n    const desc = move ? \"Go to move #\" + move : \"Go to game start\";\r\n    return (\r\n      <li key={move}>\r\n        <button onClick={() => jumpTo(move)}>{desc}</button>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  let status;\r\n  if (winner) {\r\n    status = \"Winner: \" + winner.squares;\r\n  } else {\r\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"players\">\r\n        <ScoreBoard handlePlayAgain={handlePlayAgain} score={score} />\r\n      </div>\r\n      <div>\r\n        <button className=\"play-again-btn\" onClick={handlePlayAgain}>\r\n          Play Again\r\n        </button>\r\n      </div>\r\n       \r\n      <div className=\"game-info\">\r\n          {/* when ther is no winner and total move is 10 then game is draw. other wise one of players win */}\r\n          {gameHistory.length === 10 && !winner ? (\r\n            <h1 className=\"status\">DRAW</h1>\r\n          ) : (\r\n            <div className=\"status\">{status}</div>\r\n          )}\r\n        </div>\r\n      <div className=\"block\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            winningSquares={winner ? winner.lines : []}\r\n            squares={current.squares}\r\n            onClick={(i) => handleClick(i)}\r\n          />\r\n        </div>\r\n        <div>\r\n            <ol>{moves}</ol>\r\n        </div>\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\r\nimport './app.css';\r\n\r\nimport AppHeader from './components/AppHeader/index.js';\r\nimport Game from './components/Game';\r\n\r\nconst App = () => (\r\n    <Router>\r\n        <div className=\"App container\">\r\n            <AppHeader/>\r\n            <Switch>\r\n                <Route path=\"/\" exact component={Game}/>\r\n            </Switch>\r\n        </div>\r\n    </Router>\r\n);\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}